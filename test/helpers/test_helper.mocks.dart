// Mocks generated by Mockito 5.1.0 from annotations
// in ditonton/test/helpers/test_helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;
import 'dart:convert' as _i19;
import 'dart:typed_data' as _i20;

import 'package:common/common/failure.dart' as _i9;
import 'package:common/data/datasource/movie_local_data_source.dart' as _i2;
import 'package:dartz/dartz.dart' as _i3;
import 'package:ditonton/data/datasources/remote_datasource.dart' as _i4;
import 'package:ditonton/domain/repositories/search_repository.dart' as _i12;
import 'package:ditonton/domain/repositories/watchlist_repository.dart' as _i7;
import 'package:http/src/base_request.dart' as _i18;
import 'package:http/src/io_client.dart' as _i17;
import 'package:http/src/io_streamed_response.dart' as _i5;
import 'package:http/src/response.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/domain/movie/movie.dart' as _i10;
import 'package:movies/domain/movie/movie_detail.dart' as _i16;
import 'package:movies/domain/repositories/movie_repository.dart' as _i15;
import 'package:tv_series/domain/entities/tv.dart' as _i11;
import 'package:tv_series/domain/entities/tv_detail.dart' as _i14;
import 'package:tv_series/domain/repositories/tv_repository.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieLocalDataSource_0 extends _i1.Fake
    implements _i2.MovieLocalDataSource {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeRemoteDataSource_2 extends _i1.Fake implements _i4.RemoteDataSource {
}

class _FakeIOStreamedResponse_3 extends _i1.Fake
    implements _i5.IOStreamedResponse {}

class _FakeResponse_4 extends _i1.Fake implements _i6.Response {}

/// A class which mocks [WatchlistRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistRepository extends _i1.Mock
    implements _i7.WatchlistRepository {
  MockWatchlistRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieLocalDataSource get localDataSource => (super.noSuchMethod(
      Invocation.getter(#localDataSource),
      returnValue: _FakeMovieLocalDataSource_0()) as _i2.MovieLocalDataSource);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i3.Either<_i10.Movie, _i11.TvSeries>>>>
      getWatchlistMovies() => (super.noSuchMethod(
          Invocation.method(#getWatchlistMovies, []),
          returnValue: Future<_i3.Either<_i9.Failure, List<_i3.Either<_i10.Movie, _i11.TvSeries>>>>.value(
              _FakeEither_1<_i9.Failure,
                  List<_i3.Either<_i10.Movie, _i11.TvSeries>>>())) as _i8
          .Future<_i3.Either<_i9.Failure, List<_i3.Either<_i10.Movie, _i11.TvSeries>>>>);
}

/// A class which mocks [SearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRepository extends _i1.Mock implements _i12.SearchRepository {
  MockSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.RemoteDataSource get remoteDataSource =>
      (super.noSuchMethod(Invocation.getter(#remoteDataSource),
          returnValue: _FakeRemoteDataSource_2()) as _i4.RemoteDataSource);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i3.Either<List<_i10.Movie>, List<_i11.TvSeries>>>>
      searchMovies(String? query, String? type) => (super.noSuchMethod(
              Invocation.method(#searchMovies, [query, type]),
              returnValue:
                  Future<_i3.Either<_i9.Failure, _i3.Either<List<_i10.Movie>, List<_i11.TvSeries>>>>.value(
                      _FakeEither_1<_i9.Failure, _i3.Either<List<_i10.Movie>, List<_i11.TvSeries>>>()))
          as _i8.Future<
              _i3.Either<_i9.Failure, _i3.Either<List<_i10.Movie>, List<_i11.TvSeries>>>>);
}

/// A class which mocks [TvRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTvRepository extends _i1.Mock implements _i13.TvRepository {
  MockTvRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>> getNowPlayingTVs() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingTVs, []),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i11.TvSeries>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>> getPopularTvs() =>
      (super.noSuchMethod(Invocation.method(#getPopularTvs, []),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i11.TvSeries>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i14.TvDetail>> getTvDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvDetail, [id]),
              returnValue: Future<_i3.Either<_i9.Failure, _i14.TvDetail>>.value(
                  _FakeEither_1<_i9.Failure, _i14.TvDetail>()))
          as _i8.Future<_i3.Either<_i9.Failure, _i14.TvDetail>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> saveWatchlist(
          _i14.TvDetail? detail) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [detail]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> removeWatchlist(
          _i14.TvDetail? detail) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [detail]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
  @override
  _i8.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>
      getWatchlistMovies() => (super.noSuchMethod(
              Invocation.method(#getWatchlistMovies, []),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i11.TvSeries>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>> getTvRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getTvRecommendations, [id]),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i11.TvSeries>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>> getTopRatedTvs() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedTvs, []),
              returnValue:
                  Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>.value(
                      _FakeEither_1<_i9.Failure, List<_i11.TvSeries>>()))
          as _i8.Future<_i3.Either<_i9.Failure, List<_i11.TvSeries>>>);
}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i15.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Movie>>> getNowPlayingMovies() =>
      (super.noSuchMethod(Invocation.method(#getNowPlayingMovies, []),
          returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_1<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Movie>>> getPopularMovies() =>
      (super.noSuchMethod(Invocation.method(#getPopularMovies, []),
          returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_1<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Movie>>> getTopRatedMovies() =>
      (super.noSuchMethod(Invocation.method(#getTopRatedMovies, []),
          returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_1<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, _i16.MovieDetail>> getMovieDetail(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieDetail, [id]),
          returnValue: Future<_i3.Either<_i9.Failure, _i16.MovieDetail>>.value(
              _FakeEither_1<_i9.Failure, _i16.MovieDetail>())) as _i8
          .Future<_i3.Either<_i9.Failure, _i16.MovieDetail>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, List<_i10.Movie>>> getMovieRecommendations(
          int? id) =>
      (super.noSuchMethod(Invocation.method(#getMovieRecommendations, [id]),
          returnValue: Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>.value(
              _FakeEither_1<_i9.Failure, List<_i10.Movie>>())) as _i8
          .Future<_i3.Either<_i9.Failure, List<_i10.Movie>>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> saveWatchlist(
          _i16.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#saveWatchlist, [movie]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
  @override
  _i8.Future<_i3.Either<_i9.Failure, String>> removeWatchlist(
          _i16.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [movie]),
              returnValue: Future<_i3.Either<_i9.Failure, String>>.value(
                  _FakeEither_1<_i9.Failure, String>()))
          as _i8.Future<_i3.Either<_i9.Failure, String>>);
  @override
  _i8.Future<bool> isAddedToWatchlist(int? id) =>
      (super.noSuchMethod(Invocation.method(#isAddedToWatchlist, [id]),
          returnValue: Future<bool>.value(false)) as _i8.Future<bool>);
}

/// A class which mocks [IOClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIOClient extends _i1.Mock implements _i17.IOClient {
  MockIOClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.IOStreamedResponse> send(_i18.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i5.IOStreamedResponse>.value(
                  _FakeIOStreamedResponse_3()))
          as _i8.Future<_i5.IOStreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
  @override
  _i8.Future<_i6.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<_i6.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i19.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i6.Response>.value(_FakeResponse_4()))
          as _i8.Future<_i6.Response>);
  @override
  _i8.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<_i20.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i20.Uint8List>.value(_i20.Uint8List(0)))
          as _i8.Future<_i20.Uint8List>);
}
